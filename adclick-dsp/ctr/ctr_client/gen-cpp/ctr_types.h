/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ctr_TYPES_H
#define ctr_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace DmtecCtr {

typedef int32_t MyInteger;

class Creative;

class CtrRequest;

class CtrResponse;

typedef struct _Creative__isset {
  _Creative__isset() : user_id(false), plan_id(false), unit_id(false), idea_id(false), creative_type(false), creative_width(false), creative_height(false) {}
  bool user_id :1;
  bool plan_id :1;
  bool unit_id :1;
  bool idea_id :1;
  bool creative_type :1;
  bool creative_width :1;
  bool creative_height :1;
} _Creative__isset;

class Creative {
 public:

  Creative(const Creative&);
  Creative& operator=(const Creative&);
  Creative() : user_id(0), plan_id(0), unit_id(0), idea_id(0), creative_type(0), creative_width(0), creative_height(0) {
  }

  virtual ~Creative() throw();
  int32_t user_id;
  int32_t plan_id;
  int32_t unit_id;
  int32_t idea_id;
  int32_t creative_type;
  int32_t creative_width;
  int32_t creative_height;

  _Creative__isset __isset;

  void __set_user_id(const int32_t val);

  void __set_plan_id(const int32_t val);

  void __set_unit_id(const int32_t val);

  void __set_idea_id(const int32_t val);

  void __set_creative_type(const int32_t val);

  void __set_creative_width(const int32_t val);

  void __set_creative_height(const int32_t val);

  bool operator == (const Creative & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(unit_id == rhs.unit_id))
      return false;
    if (!(idea_id == rhs.idea_id))
      return false;
    if (!(creative_type == rhs.creative_type))
      return false;
    if (!(creative_width == rhs.creative_width))
      return false;
    if (!(creative_height == rhs.creative_height))
      return false;
    return true;
  }
  bool operator != (const Creative &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Creative & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Creative &a, Creative &b);

inline std::ostream& operator<<(std::ostream& out, const Creative& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CtrRequest__isset {
  _CtrRequest__isset() : sid(false), user_id(false), ip(false), prov(false), city(false), url(false), adview_type(false), weekday(false), hour(false), ua(false), site_category(false), site_quality(false), page_category(false), page_quality(false), page_type(false), user_interests(false), page_keywords(false), creatives(false) {}
  bool sid :1;
  bool user_id :1;
  bool ip :1;
  bool prov :1;
  bool city :1;
  bool url :1;
  bool adview_type :1;
  bool weekday :1;
  bool hour :1;
  bool ua :1;
  bool site_category :1;
  bool site_quality :1;
  bool page_category :1;
  bool page_quality :1;
  bool page_type :1;
  bool user_interests :1;
  bool page_keywords :1;
  bool creatives :1;
} _CtrRequest__isset;

class CtrRequest {
 public:

  CtrRequest(const CtrRequest&);
  CtrRequest& operator=(const CtrRequest&);
  CtrRequest() : sid(), user_id(), ip(), prov(), city(), url(), adview_type(0), weekday(0), hour(0), ua(), site_quality(), page_quality(), page_type() {
  }

  virtual ~CtrRequest() throw();
  std::string sid;
  std::string user_id;
  std::string ip;
  std::string prov;
  std::string city;
  std::string url;
  int32_t adview_type;
  int32_t weekday;
  int32_t hour;
  std::string ua;
  std::vector<std::string>  site_category;
  std::string site_quality;
  std::vector<std::string>  page_category;
  std::string page_quality;
  std::string page_type;
  std::vector<std::string>  user_interests;
  std::vector<std::string>  page_keywords;
  std::vector<Creative>  creatives;

  _CtrRequest__isset __isset;

  void __set_sid(const std::string& val);

  void __set_user_id(const std::string& val);

  void __set_ip(const std::string& val);

  void __set_prov(const std::string& val);

  void __set_city(const std::string& val);

  void __set_url(const std::string& val);

  void __set_adview_type(const int32_t val);

  void __set_weekday(const int32_t val);

  void __set_hour(const int32_t val);

  void __set_ua(const std::string& val);

  void __set_site_category(const std::vector<std::string> & val);

  void __set_site_quality(const std::string& val);

  void __set_page_category(const std::vector<std::string> & val);

  void __set_page_quality(const std::string& val);

  void __set_page_type(const std::string& val);

  void __set_user_interests(const std::vector<std::string> & val);

  void __set_page_keywords(const std::vector<std::string> & val);

  void __set_creatives(const std::vector<Creative> & val);

  bool operator == (const CtrRequest & rhs) const
  {
    if (!(sid == rhs.sid))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(prov == rhs.prov))
      return false;
    if (!(city == rhs.city))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(adview_type == rhs.adview_type))
      return false;
    if (!(weekday == rhs.weekday))
      return false;
    if (!(hour == rhs.hour))
      return false;
    if (!(ua == rhs.ua))
      return false;
    if (!(site_category == rhs.site_category))
      return false;
    if (!(site_quality == rhs.site_quality))
      return false;
    if (!(page_category == rhs.page_category))
      return false;
    if (!(page_quality == rhs.page_quality))
      return false;
    if (!(page_type == rhs.page_type))
      return false;
    if (!(user_interests == rhs.user_interests))
      return false;
    if (!(page_keywords == rhs.page_keywords))
      return false;
    if (!(creatives == rhs.creatives))
      return false;
    return true;
  }
  bool operator != (const CtrRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CtrRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CtrRequest &a, CtrRequest &b);

inline std::ostream& operator<<(std::ostream& out, const CtrRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CtrResponse__isset {
  _CtrResponse__isset() : ctr(false) {}
  bool ctr :1;
} _CtrResponse__isset;

class CtrResponse {
 public:

  CtrResponse(const CtrResponse&);
  CtrResponse& operator=(const CtrResponse&);
  CtrResponse() {
  }

  virtual ~CtrResponse() throw();
  std::vector<double>  ctr;

  _CtrResponse__isset __isset;

  void __set_ctr(const std::vector<double> & val);

  bool operator == (const CtrResponse & rhs) const
  {
    if (!(ctr == rhs.ctr))
      return false;
    return true;
  }
  bool operator != (const CtrResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CtrResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CtrResponse &a, CtrResponse &b);

inline std::ostream& operator<<(std::ostream& out, const CtrResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
