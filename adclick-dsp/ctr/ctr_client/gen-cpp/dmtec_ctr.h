/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DmtecCtr_H
#define DmtecCtr_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ctr_types.h"

namespace DmtecCtr {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DmtecCtrIf {
 public:
  virtual ~DmtecCtrIf() {}
  virtual void echo(CtrRequest& _return, const CtrRequest& req) = 0;
  virtual int32_t echo_num(const int32_t num) = 0;
  virtual void call(CtrResponse& _return, const CtrRequest& req) = 0;
};

class DmtecCtrIfFactory {
 public:
  typedef DmtecCtrIf Handler;

  virtual ~DmtecCtrIfFactory() {}

  virtual DmtecCtrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DmtecCtrIf* /* handler */) = 0;
};

class DmtecCtrIfSingletonFactory : virtual public DmtecCtrIfFactory {
 public:
  DmtecCtrIfSingletonFactory(const boost::shared_ptr<DmtecCtrIf>& iface) : iface_(iface) {}
  virtual ~DmtecCtrIfSingletonFactory() {}

  virtual DmtecCtrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DmtecCtrIf* /* handler */) {}

 protected:
  boost::shared_ptr<DmtecCtrIf> iface_;
};

class DmtecCtrNull : virtual public DmtecCtrIf {
 public:
  virtual ~DmtecCtrNull() {}
  void echo(CtrRequest& /* _return */, const CtrRequest& /* req */) {
    return;
  }
  int32_t echo_num(const int32_t /* num */) {
    int32_t _return = 0;
    return _return;
  }
  void call(CtrResponse& /* _return */, const CtrRequest& /* req */) {
    return;
  }
};

typedef struct _DmtecCtr_echo_args__isset {
  _DmtecCtr_echo_args__isset() : req(false) {}
  bool req :1;
} _DmtecCtr_echo_args__isset;

class DmtecCtr_echo_args {
 public:

  DmtecCtr_echo_args(const DmtecCtr_echo_args&);
  DmtecCtr_echo_args& operator=(const DmtecCtr_echo_args&);
  DmtecCtr_echo_args() {
  }

  virtual ~DmtecCtr_echo_args() throw();
  CtrRequest req;

  _DmtecCtr_echo_args__isset __isset;

  void __set_req(const CtrRequest& val);

  bool operator == (const DmtecCtr_echo_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const DmtecCtr_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmtecCtr_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DmtecCtr_echo_pargs {
 public:


  virtual ~DmtecCtr_echo_pargs() throw();
  const CtrRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmtecCtr_echo_result__isset {
  _DmtecCtr_echo_result__isset() : success(false) {}
  bool success :1;
} _DmtecCtr_echo_result__isset;

class DmtecCtr_echo_result {
 public:

  DmtecCtr_echo_result(const DmtecCtr_echo_result&);
  DmtecCtr_echo_result& operator=(const DmtecCtr_echo_result&);
  DmtecCtr_echo_result() {
  }

  virtual ~DmtecCtr_echo_result() throw();
  CtrRequest success;

  _DmtecCtr_echo_result__isset __isset;

  void __set_success(const CtrRequest& val);

  bool operator == (const DmtecCtr_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DmtecCtr_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmtecCtr_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmtecCtr_echo_presult__isset {
  _DmtecCtr_echo_presult__isset() : success(false) {}
  bool success :1;
} _DmtecCtr_echo_presult__isset;

class DmtecCtr_echo_presult {
 public:


  virtual ~DmtecCtr_echo_presult() throw();
  CtrRequest* success;

  _DmtecCtr_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DmtecCtr_echo_num_args__isset {
  _DmtecCtr_echo_num_args__isset() : num(false) {}
  bool num :1;
} _DmtecCtr_echo_num_args__isset;

class DmtecCtr_echo_num_args {
 public:

  DmtecCtr_echo_num_args(const DmtecCtr_echo_num_args&);
  DmtecCtr_echo_num_args& operator=(const DmtecCtr_echo_num_args&);
  DmtecCtr_echo_num_args() : num(0) {
  }

  virtual ~DmtecCtr_echo_num_args() throw();
  int32_t num;

  _DmtecCtr_echo_num_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const DmtecCtr_echo_num_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const DmtecCtr_echo_num_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmtecCtr_echo_num_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DmtecCtr_echo_num_pargs {
 public:


  virtual ~DmtecCtr_echo_num_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmtecCtr_echo_num_result__isset {
  _DmtecCtr_echo_num_result__isset() : success(false) {}
  bool success :1;
} _DmtecCtr_echo_num_result__isset;

class DmtecCtr_echo_num_result {
 public:

  DmtecCtr_echo_num_result(const DmtecCtr_echo_num_result&);
  DmtecCtr_echo_num_result& operator=(const DmtecCtr_echo_num_result&);
  DmtecCtr_echo_num_result() : success(0) {
  }

  virtual ~DmtecCtr_echo_num_result() throw();
  int32_t success;

  _DmtecCtr_echo_num_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DmtecCtr_echo_num_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DmtecCtr_echo_num_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmtecCtr_echo_num_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmtecCtr_echo_num_presult__isset {
  _DmtecCtr_echo_num_presult__isset() : success(false) {}
  bool success :1;
} _DmtecCtr_echo_num_presult__isset;

class DmtecCtr_echo_num_presult {
 public:


  virtual ~DmtecCtr_echo_num_presult() throw();
  int32_t* success;

  _DmtecCtr_echo_num_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DmtecCtr_call_args__isset {
  _DmtecCtr_call_args__isset() : req(false) {}
  bool req :1;
} _DmtecCtr_call_args__isset;

class DmtecCtr_call_args {
 public:

  DmtecCtr_call_args(const DmtecCtr_call_args&);
  DmtecCtr_call_args& operator=(const DmtecCtr_call_args&);
  DmtecCtr_call_args() {
  }

  virtual ~DmtecCtr_call_args() throw();
  CtrRequest req;

  _DmtecCtr_call_args__isset __isset;

  void __set_req(const CtrRequest& val);

  bool operator == (const DmtecCtr_call_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const DmtecCtr_call_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmtecCtr_call_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DmtecCtr_call_pargs {
 public:


  virtual ~DmtecCtr_call_pargs() throw();
  const CtrRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmtecCtr_call_result__isset {
  _DmtecCtr_call_result__isset() : success(false) {}
  bool success :1;
} _DmtecCtr_call_result__isset;

class DmtecCtr_call_result {
 public:

  DmtecCtr_call_result(const DmtecCtr_call_result&);
  DmtecCtr_call_result& operator=(const DmtecCtr_call_result&);
  DmtecCtr_call_result() {
  }

  virtual ~DmtecCtr_call_result() throw();
  CtrResponse success;

  _DmtecCtr_call_result__isset __isset;

  void __set_success(const CtrResponse& val);

  bool operator == (const DmtecCtr_call_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DmtecCtr_call_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmtecCtr_call_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DmtecCtr_call_presult__isset {
  _DmtecCtr_call_presult__isset() : success(false) {}
  bool success :1;
} _DmtecCtr_call_presult__isset;

class DmtecCtr_call_presult {
 public:


  virtual ~DmtecCtr_call_presult() throw();
  CtrResponse* success;

  _DmtecCtr_call_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DmtecCtrClient : virtual public DmtecCtrIf {
 public:
  DmtecCtrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DmtecCtrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(CtrRequest& _return, const CtrRequest& req);
  void send_echo(const CtrRequest& req);
  void recv_echo(CtrRequest& _return);
  int32_t echo_num(const int32_t num);
  void send_echo_num(const int32_t num);
  int32_t recv_echo_num();
  void call(CtrResponse& _return, const CtrRequest& req);
  void send_call(const CtrRequest& req);
  void recv_call(CtrResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DmtecCtrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DmtecCtrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DmtecCtrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echo_num(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_call(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DmtecCtrProcessor(boost::shared_ptr<DmtecCtrIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &DmtecCtrProcessor::process_echo;
    processMap_["echo_num"] = &DmtecCtrProcessor::process_echo_num;
    processMap_["call"] = &DmtecCtrProcessor::process_call;
  }

  virtual ~DmtecCtrProcessor() {}
};

class DmtecCtrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DmtecCtrProcessorFactory(const ::boost::shared_ptr< DmtecCtrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DmtecCtrIfFactory > handlerFactory_;
};

class DmtecCtrMultiface : virtual public DmtecCtrIf {
 public:
  DmtecCtrMultiface(std::vector<boost::shared_ptr<DmtecCtrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DmtecCtrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DmtecCtrIf> > ifaces_;
  DmtecCtrMultiface() {}
  void add(boost::shared_ptr<DmtecCtrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(CtrRequest& _return, const CtrRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, req);
    }
    ifaces_[i]->echo(_return, req);
    return;
  }

  int32_t echo_num(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo_num(num);
    }
    return ifaces_[i]->echo_num(num);
  }

  void call(CtrResponse& _return, const CtrRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->call(_return, req);
    }
    ifaces_[i]->call(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DmtecCtrConcurrentClient : virtual public DmtecCtrIf {
 public:
  DmtecCtrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DmtecCtrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(CtrRequest& _return, const CtrRequest& req);
  int32_t send_echo(const CtrRequest& req);
  void recv_echo(CtrRequest& _return, const int32_t seqid);
  int32_t echo_num(const int32_t num);
  int32_t send_echo_num(const int32_t num);
  int32_t recv_echo_num(const int32_t seqid);
  void call(CtrResponse& _return, const CtrRequest& req);
  int32_t send_call(const CtrRequest& req);
  void recv_call(CtrResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
